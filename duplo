#!/bin/bash
#TODO: Cache gpg_pw in keyring if not set in config and if possible; export as PASSPHRASE for duplicity should work
#TODO: Support usage as root; are configs saved in /etc?
set -e
CONFIG=${1^^}
shift
GDRIVE="gdocs://justin@dray.be/backups/$(hostname)"
RSYNC="rsync://duplo@abachi.dray.be:22222/$(hostname)"
CONFIG_DIR="$HOME/.duply/$CONFIG"
CONFIG_FILE="$CONFIG_DIR/conf"
EXCLUSIONS_FILE="$CONFIG_DIR/exclude"
NODE_VERSION=5
BINARY_DEPENDENCIES="keybase node duply duplicity gpg jq"
PIP_DEPENDENCIES="PyDrive"

setup_node() {
	if "$HOME/.nvm/nvm.sh"; then
		. "$HOME/.nvm/nvm.sh"
		if ! nvm use $NODE_VERSION &>/dev/null; then
			nvm install $NODE_VERSION
			nvm use $NODE_VERSION
		fi
	fi
}

check_binary_dependency() {
	application="$1"
	if ! which "$application" &>/dev/null; then
		echo "Please install $application"
		return 1
	fi
}

check_pip_dependency() {
	application="$1"
	if ! pip freeze | grep -q "$application" &>/dev/null; then
		echo "Please install $application"
		return 1
	fi
}

get_key() {
	local key_id
	key_id=$(grep GPG_KEY "$CONFIG_FILE" | sed -E 's/.*=(.*)/\1/') &>/dev/null

	if [[ ! $key_id ]]; then
		setup_node
		keybase login
		key_id=$(keybase status | jq -r .user.key.key_id)
	fi
	sed -E 's/.*(.{8})/\1/' <<<"$key_id"
}

trust_key() {
	local key=$1
	if ! gpg --export-ownertrust | grep -q "$key"; then
		full_key=$(gpg --list-keys --fingerprint --with-colons | grep "fpr.*$key" | sed -E 's/^fpr:*([A-F0-9]+):/\1/')
		gpg --import-ownertrust <<<"${full_key}:6:"
	fi
}

create_duply_config() {
	if ! [[ -f $CONFIG_FILE ]]; then
		mkdir -p "$CONFIG_DIR"
		touch "$CONFIG_FILE"
		touch "$EXCLUSIONS_FILE"
	fi
}

write_gdrive_config() {
	set_config_line "export GOOGLE_DRIVE_SETTINGS=gdrive"

	cat <<-EOF > "$CONFIG_DIR/gdrive"
		client_config_backend: settings
		client_config:
		    client_id: 16782109138-qhd2nnb6ik7drpav1j4tgp4g9dkl5t2t.apps.googleusercontent.com
		    client_secret: WfY3Iz0dznkKU92YfCCSo3Fu
		save_credentials: True
		save_credentials_backend: file
		save_credentials_file: $CONFIG_DIR/client_secrets.json
		get_refresh_token: True
		EOF
}

populate_exclusions() {
	local EXCLUSIONS
	EXCLUSIONS+=("- $HOME/Downloads")
	EXCLUSIONS+=("- $HOME/.cache")
	EXCLUSIONS+=("- $HOME/.config/gcloud/logs")
	EXCLUSIONS+=("- $HOME/.local/share/Steam")
	EXCLUSIONS+=("- $HOME/.local/share/Trash")
	EXCLUSIONS+=("- $HOME/.PlayOnLinux")
	EXCLUSIONS+=("- $HOME/Videos")
	EXCLUSIONS+=("- $HOME/Virtualbox VMs")
	#EXCLUSIONS+=("+ $HOME")
	EXCLUSIONS+=('- **')

	touch "$EXCLUSIONS_FILE"
	for line in "${EXCLUSIONS[@]}"; do
		if ! grep -Fq -- "$line" "$EXCLUSIONS_FILE" ; then
			echo "$line" >> "$EXCLUSIONS_FILE"
		fi
	done
}

set_config_line() {
	local line="$1"
	variable=$(grep -Eo '^.*?=' <<<"$line")
	if grep -q "^$variable" "$CONFIG_FILE"; then
		sed -i "s|^${variable}.*|$line|g" "$CONFIG_FILE"
	else
		echo "$line" >> "$CONFIG_FILE"
	fi
}

setup_gpg_agent() {
	local line='allow-loopback-pinentry'
	local file="$HOME/.gnupg/gpg-agent.conf"

	if ! grep -q "^$line" "$file"; then
		echo "$line" >> "$file"
	fi
}

get_gpg_passphrase() {
	local GPG_PW
	source <(grep '^GPG_PW' $CONFIG_FILE)
	if ! [[ $GPG_PW ]]; then
		GPG_PW="$(python -c "import keyring; print(keyring.get_password('Duplo', 'GPG'))")"
		if [[ $GPG_PW == 'None' ]]; then
			echo -n 'Please enter the GPG passphrase:' 2>&1
			read -s -r GPG_PW
			python -c "import keyring; keyring.set_password('Duplo', 'GPG', '$GPG_PW')"
		fi
	fi
	echo $GPG_PW
}

setup_duply() {
	local key_id=$1
	local target=$2
	local CONFIG_LINES
	CONFIG_LINES+=("GPG_KEY=$key_id")
	CONFIG_LINES+=("TARGET=$(eval echo \$$CONFIG)")
	CONFIG_LINES+=("SOURCE='/'")
	CONFIG_LINES+=('DUPL_PARAMS="$DUPL_PARAMS --use-agent --allow-source-mismatch"')
	CONFIG_LINES+=("GPG_OPTS='--pinentry-mode loopback'")

	create_duply_config
	populate_exclusions
	[[ $CONFIG == 'GDRIVE' ]] && write_gdrive_config
	for line in "${CONFIG_LINES[@]}"; do
		set_config_line "$line"
	done
}

for dep in $BINARY_DEPENDENCIES; do
	check_binary_dependency "$dep"
done

for dep in $PIP_DEPENDENCIES; do
	check_pip_dependency "$dep"
done

if ! [[ $CONFIG =~ (GDRIVE|RSYNC) ]]; then
	echo 'Please specify a valid config (gdrive or rsync)'
	exit 1
fi

key_id="$(get_key)"
trust_key "$key_id"
setup_duply "$key_id"
setup_gpg_agent

cd "$CONFIG_DIR"
GPG_PW=$(get_gpg_passphrase) duply $CONFIG "$@"
