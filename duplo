#!/bin/bash
#TODO: Support usage as root; are configs saved in /etc?
#TODO: Retry unless a backup is already done that day? maybe hourly cron that checks last valid backup date? Might need a seperate wrapper for that. or a flag
set -e
CONFIG=${1^^}
shift || true
GDRIVE="gdocs://justin@dray.be/backups/$(hostname)"
RSYNC="rsync://duplo:/$(hostname)"
MAX_AGE=3M
MAX_FULLBACKUP_AGE=1M
CONFIG_DIR="$HOME/.duply/$CONFIG"
CONFIG_FILE="$CONFIG_DIR/conf"
EXCLUSIONS_FILE="$CONFIG_DIR/exclude"
NODE_VERSION=5
BINARY_DEPENDENCIES="keybase node duply duplicity gpg jq"
PIP_DEPENDENCIES="PyDrive keyring"

setup_node() {
	if [[ -f "$HOME/.nvm/nvm.sh" ]]; then
		. "$HOME/.nvm/nvm.sh"
		if ! nvm use $NODE_VERSION &>/dev/null; then
			nvm install $NODE_VERSION
			nvm use $NODE_VERSION
		fi
	fi
}

check_binary_dependency() {
	application="$1"
	if ! which "$application" &>/dev/null; then
		echo "Please install $application" 1>&2
		echo 1
	else
		echo 0
	fi
}

check_pip_dependency() {
	application="$1"
	pip=pip
	which pip2 &>/dev/null && pip=pip2
	if ! $pip freeze | grep -q "$application" &>/dev/null; then
		echo "Please install $application" 1>&2
		echo 1
	else
		echo 0
	fi
}

get_key() {
	local key_id
	key_id=$(grep GPG_KEY "$CONFIG_FILE" 2>/dev/null | sed -E 's/.*=(.*)/\1/')

	if [[ ! $key_id ]]; then
		setup_node 1>&2
		key_id=$(keybase status | jq -r .user.key.key_id)
	fi
	sed -E 's/.*(.{8})/\1/' <<<"$key_id"
}

trust_key() {
	local key=$1
	if ! gpg --export-ownertrust | grep -q "$key"; then
		full_key=$(gpg --list-keys --fingerprint --with-colons | grep "fpr.*$key" | sed -E 's/^fpr:*([A-F0-9]+):/\1/')
		gpg --import-ownertrust <<<"${full_key}:6:"
	fi
}

create_duply_config() {
	if ! [[ -f $CONFIG_FILE ]]; then
		mkdir -p "$CONFIG_DIR"
		touch "$CONFIG_FILE"
		touch "$EXCLUSIONS_FILE"
		chmod -R go-rwx "$CONFIG_DIR"
	fi
}

write_gdrive_config() {
	set_config_line "export GOOGLE_DRIVE_SETTINGS=gdrive"

	cat <<-EOF > "$CONFIG_DIR/gdrive"
		client_config_backend: settings
		client_config:
		    client_id: 16782109138-qhd2nnb6ik7drpav1j4tgp4g9dkl5t2t.apps.googleusercontent.com
		    client_secret: WfY3Iz0dznkKU92YfCCSo3Fu
		save_credentials: True
		save_credentials_backend: file
		save_credentials_file: $CONFIG_DIR/client_secrets.json
		get_refresh_token: True
		EOF
}

write_rsync_config() {
	if ! [[ -f "$HOME/.ssh/duplo" ]]; then
		cd "$HOME/.ssh"
		curl -O https://public.dray.be/duplo-key
		setup_node 1>&2
		keybase decrypt duplo-key > duplo-key.tar.gz
		tar xf duplo-key.tar.gz
	fi
	configure_ssh
}

configure_ssh() {
	if ! grep -q 'Host duplo' "$HOME/.ssh/config"; then
		cat <<-EOF >>"$HOME/.ssh/config"

		Host duplo
		    User duplo
		    Hostname abachi.dray.be
		    Port 22222
		    IdentityFile ~/.ssh/duplo
		EOF
	fi
}

populate_exclusions() {
	local EXCLUSIONS
	EXCLUSIONS+=("- $HOME/.PlayOnLinux")
	EXCLUSIONS+=("- $HOME/.cache")
	EXCLUSIONS+=("- $HOME/.config/gcloud/logs")
	EXCLUSIONS+=("- $HOME/.local/share/Steam")
	EXCLUSIONS+=("- $HOME/.local/share/Trash")
	EXCLUSIONS+=("- $HOME/.local/share/ftb")
	EXCLUSIONS+=("- $HOME/.config/chromium")
	EXCLUSIONS+=("- $HOME/.config/gcloud")
	EXCLUSIONS+=("- $HOME/.vagrant.d")
	EXCLUSIONS+=("- $HOME/.ftblauncher")
	EXCLUSIONS+=("- $HOME/.npm")
	EXCLUSIONS+=("- $HOME/.vim")
	EXCLUSIONS+=("- $HOME/.nvm")
	EXCLUSIONS+=("- $HOME/.virtualenvs")
	EXCLUSIONS+=("- $HOME/.gems")
	EXCLUSIONS+=("- $HOME/Downloads")
	EXCLUSIONS+=("- $HOME/Videos")
	EXCLUSIONS+=("- $HOME/Virtualbox VMs")
	#EXCLUSIONS+=("+ $HOME")
	EXCLUSIONS+=('- **')

	touch "$EXCLUSIONS_FILE"
	for line in "${EXCLUSIONS[@]}"; do
		if ! grep -Fq -- "$line" "$EXCLUSIONS_FILE" ; then
			echo "$line" >> "$EXCLUSIONS_FILE"
		fi
	done
}

set_config_line() {
	local line="$1"
	variable=$(grep -Po '^.*?=' <<<"$line")
	if grep -q "^$variable" "$CONFIG_FILE"; then
		sed -i "s|^${variable}.*|$line|g" "$CONFIG_FILE"
	else
		echo "$line" >> "$CONFIG_FILE"
	fi
}

setup_gpg_agent() {
	local line='allow-loopback-pinentry'
	local file="$HOME/.gnupg/gpg-agent.conf"

	if ! grep -q "^$line" "$file"; then
		echo "$line" >> "$file"
	fi
}

get_gpg_passphrase() {
	local GPG_PW
	source <(grep '^GPG_PW' $CONFIG_FILE)
	python=python
	which python2 &>/dev/null && python=python2
	if ! [[ $GPG_PW ]]; then
		GPG_PW="$($python -c "import keyring; print(keyring.get_password('Duplo', 'GPG'))")"
		if [[ $GPG_PW == 'None' ]]; then
			echo -n 'Please enter the GPG passphrase:' 1>&2
			read -s -r GPG_PW
			$python -c "import keyring; keyring.set_password('Duplo', 'GPG', '$GPG_PW')"
		fi
	fi
	echo $GPG_PW
}

setup_duply() {
	local key_id=$1
	local target=$2
	local CONFIG_LINES
	local DUPL_PARAMS

	DUPL_PARAMS='--use-agent --allow-source-mismatch'
	DUPL_PARAMS+=" --full-if-older-than $MAX_FULLBACKUP_AGE"

	create_duply_config
	populate_exclusions
	write_${CONFIG,,}_config

	CONFIG_LINES+=("GPG_KEY=$key_id")
	CONFIG_LINES+=("TARGET=$(eval echo \$$CONFIG)")
	CONFIG_LINES+=("SOURCE='/'")
	CONFIG_LINES+=("GPG_OPTS='--pinentry-mode loopback'")
	CONFIG_LINES+=("MAX_AGE=$MAX_AGE")
	CONFIG_LINES+=("DUPL_PARAMS=\"\$DUPL_PARAMS $DUPL_PARAMS\"")
	for line in "${CONFIG_LINES[@]}"; do
		set_config_line "$line"
	done
}

dep_error=0

for dep in $BINARY_DEPENDENCIES; do
	check=$(check_binary_dependency "$dep")
	dep_error=$(( dep_error + check ))
done

for dep in $PIP_DEPENDENCIES; do
	check=$(check_pip_dependency "$dep")
	dep_error=$(( dep_error + check ))
done

[[ $dep_error != 0 ]] && exit 1

if ! [[ $CONFIG =~ (GDRIVE|RSYNC) ]]; then
	echo 'Please specify a valid config (gdrive or rsync)'
	exit 1
fi

key_id="$(get_key)"
trust_key "$key_id"
setup_duply "$key_id"
setup_gpg_agent

cd "$CONFIG_DIR"
GPG_PW=$(get_gpg_passphrase) duply $CONFIG "$@"

if [[ $1 == 'backup' ]]; then
	cat <<-EOF
	Purging old backups
	-----------------------------------------
	EOF
	GPG_PW=$(get_gpg_passphrase) duply $CONFIG cleanup
	GPG_PW=$(get_gpg_passphrase) duply $CONFIG purge
fi
