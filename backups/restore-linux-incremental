#!/bin/bash
#
# restore-linux-incremental - Restore a backup made with the backup-linux-incremental script
#

LOCK="/var/run/$(basename "$0")"

# Initial checks
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

clock () { echo -n "[$(date +%H:%M:%S)]"; }

function check {
	[[ $1 == 0 ]] && echo -e "[\e[1;32mOK\e[00m]"
	[[ $1 != 0 ]] && echo -e "[\e[1;31mFAILED\e[00m]\nSee ${LOG} for more details"
}

function usage {
	cat <<-EOF
	usage: $(basename "$(readlink -f "$0")") [options] backup-source destination

	OPTIONS:
	-p  Package cache: Specify a different package cache than the host machine's

	This script will restore a linux host to the specified destination
	The backup-source folder should be one generated with the
	backup-linux-incremental script. If the backup source is an Arch
	linux machine, it will re-install packages before copying over the
	backup.
	EOF
}

while getopts ":hp:" OPTION
do
	case $OPTION in
		h) usage; exit 0;;
		p) pkgcache=$OPTIND ;;
		?) usage; exit 1;;
	esac
done
shift $(( OPTIND -1 ))

source=$1
destination=$2

if [[ -z source ]] || [[ -z $destination ]]
then
	echo -e "\e[31;1mYou must specify both a source and a destination\e[0m"
	usage
	exit 1
fi

if [[ ! -d $source ]]
then
	echo -e "\e[31;1mBackup source does not exist! Aborting\e[0m"
	exit 1
fi

if [[ ! -d $destination ]]
then
	echo -e "\e[31;1mDestination directory does not exist! Aborting\e[0m"
	exit 1
fi

exec 200>"$LOCK"
if flock -xn 200; then
	echo -e "               \e[31;1m***** WARNING! *****\e[0m"
	echo "This will remove all files from the destination ($destination)"
	echo "Press enter to continue (or ctrl+c to exit)"
	read

	# Test this with /boot as a sub-mount with existing files
	rm -rf "$destination/"*

	if [[ -d $source/var/lib/pacman ]]
	then
		echo "Restoring packages..."
		# Copy over pacman database so that it won't have to re-download package indexes
		mkdir -p "$destination/var/lib/pacman/sync"
		rsync -a "$source/var/lib/pacman/sync/"* "$destination/var/lib/pacman/sync"

		if [[ -z $pkgcache ]]
		then
			# Specify they host's package cache as default
			pkgcache="/var/cache/pacman/pkg"
		fi

		# Mounting proc/sys to stop some errors while installing packages
		mkdir "$destination/"{dev,etc,proc,sys}
		trap "umount $destination/dev $destination/proc $destination/sys" 0 SIGINT SIGTERM
		mount -o bind /dev "$destination/dev"
		mount -o bind /proc "$destination/proc"
		mount -o bind /sys "$destination/sys"
		cp "$source/etc/pacman.conf" "$destination/etc"
		sed -i '/IgnorePkg/d' "$destination/etc/pacman.conf"
		echo -e '\e[34;1mInstalling base package group...\e[0m'
		pacman --noconfirm --root "$destination" --config "$destination/etc/pacman.conf" --cachedir "$pkgcache" --force -S base
		echo -e '\e[34;1mInstalling all previously installed packages\e[0m'
		cp "$source/etc/pacman.conf" "$destination/etc"
		sed -i '/IgnorePkg/d' "$destination/etc/pacman.conf"
		pacman -Qqe --dbpath "$source/var/lib/pacman/" > /tmp/pacman-package-list
		pacman --noconfirm --root "$destination" --config "$destination/etc/pacman.conf" --cachedir "$pkgcache" --dbpath="$destination/var/lib/pacman" --force -Sy $(cat /tmp/pacman-package-list) 2>&1 | tee /tmp/pacman.log
		if grep -q 'target not found' /tmp/pacman.log
		then
			echo -e '\e[31;1mThe following packages failed to be found in the defined repos. They will not be present after the restore. The list will be available at /missing-packages post-restore\e[0m'
			echo "" > "$destination/missing-packages"
			for missing in $(cat /tmp/pacman.log | grep 'target not found' | awk '{print $5}')
			do
				echo "$missing" | tee -a "$destination/missing-packages"
				sed -i "/${missing}/d" /tmp/pacmange-package-list
			done
			pacman --noconfirm --root "$destination" --config "$destination/etc/pacman.conf" --cachedir "$pkgcache" --dbpath="$destination/var/lib/pacman" --force -Sy $(cat /tmp/pacman-package-list) 2>&1 | tee /tmp/pacman.log
		fi
	fi

	# rsync all the things
	echo "Restoring backup files..."
	rsync -aHAX "$source/" "$destination/"
fi
