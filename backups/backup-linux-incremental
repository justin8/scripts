#!/bin/bash
#
# backup-linux-incremental - hardlink based rsync incremental backup
#
# Cleanup is enabled by having .cleanup file present in the backup location
#

# Static variables
BACKUPDIR=/raid/shares/backups/Incremental
DATE=$(date +%Y-%m-%d)

default_exclusions="/dev/*
/mnt/*
/media/*
/proc/*
/run/*
/.snapshots
/sys/*
/tmp/*
/var/abs/*
/var/cache/pacman/pkg/*
/var/lib/mlocate/mlocate.db
/var/log/*
/var/tmp/*
lost+found"

# Initial checks
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

clock () { echo -n "[$(date +%H:%M:%S)]"; }

function check {
	[[ $1 == 0 ]] && echo -e "[\e[1;32mOK\e[00m]"
	[[ $1 != 0 ]] && echo -e "[\e[1;31mFAILED\e[00m]\nSee ${LOG} for more details"
}

function usage {
	cat <<-EOF
	usage: $(basename "$(readlink -f "$0")") hostname

	This script will backup a linux host to $BACKUPDIR.
	hostname must be resolvable by the local machine.
	It is also possible to symlink the script as 'backup-HOSTNAME' in order to
	default to quiet mode and backup the host specified in the name.
	EOF
}

function rsync_check {
	# Input rsync-return-code
	rc=$1
	case $rc in
		0)
			echo "$(clock) Rsync finished Successfully"
			;;
		23)
			echo "$(clock) Rsync finished with some possibly ignorable errors (some files/attrs were not transferred). Possibly a mounted chroot sys/proc?"
			error=$rc
			;;
		24)
			echo "$(clock) Rsync finished with some ignorable errors (some files vanished before they could be transferred)"
			;;
		*)
			echo "$(clock) Rsync failed with error code $rc, backup for $DATE will be deleted."
			;;
	esac
	return "$rc"
}

function remove-backup {
	# Input path-to-backup
	del_backup=$1
	
	echo "$(clock) Clean Up: $del_backup backup has been detected as over 30 days old"
	if [[ -z "$cleanup" ]]
	then
		echo "$(clock) Clean Up: An error has occurred during cleanup; $del_backup will NOT be deleted"
	else
		if [[ -f $cleanup ]]
		then
			echo "$(clock) Clean Up: Clean Up is enabled; Deleting $del_backup"
			rm -rf "$del_backup"
		else
			echo "$(clock) Clean Up: Clean Up is disabled; $del_backup will NOT be deleted."
		fi
	fi
}

function exit_cleanup {
	if [[ -z $exit_cleanup_complete ]]
	then
		[[ -n $rsyncfailed ]] && rm -rf "$backup_current"
		rm -f "$LOCK"
		exit_cleanup_complete=1
	fi
}

if echo $1 | grep -qE '\-(h|-help)?'
then
	usage
	exit 0
fi

script_name=$(basename "$0")
if echo "$script_name" | grep -qE  '^backup-[a-z][a-z][a-z]+$'
then
	target=${script_name#backup-}
	quiet=true
else
	target=$1
fi

if [[ -z "$target" ]]
then
	echo "Please specify a host to back up" | tee -a "/var/log/backup-linux-incremental.log"
	exit 1
fi

LOG="/var/log/backup-linux-incremental-$target.log"
LOCK="/run/lock/backup-linux-incremental-$target"

if [[ -z "$quiet" ]]
then
	exec > >(tee -a "$LOG") 2>&1
else
	exec >> "$LOG" 2>&1
fi

exec 200>"$LOCK"
if flock -xn 200; then
	trap exit_cleanup 0 SIGINT SIGTERM
	
	# Instance variables
	backup_host_dir="$BACKUPDIR/$target"
	backup_current="$backup_host_dir/$DATE"
	rsyncopts="-aHAX"
	rsyncoptsfile=$backup_host_dir/_rsyncopts
	custom_exclusions=$backup_host_dir/_exclude
	cleanup=$backup_host_dir/_cleanup

	if [[ ! -f $custom_exclusions ]]
	then
		echo "The '_exclude' file is required in the backup directory ($backup_host_dir)"
		exit 1
	fi

	if [[ -f $rsyncoptsfile ]]
	then
		rsyncopts=$(head -n1 "$rsyncoptsfile")
	fi

	if [[ -e $backup_current ]]
	then
		[[ -z "$quiet" ]] && echo "$DATE A backup in $backup_current already exists! Please delete this folder first if you wish to create a new backup. Aborting!"
		exit 0
	fi

	x=0
	while ! ssh -oBatchMode=yes  -oConnectTimeout=30 "$target" echo > /dev/null 2>&1
	do
		[[ -z "$quiet" ]] && echo "$(date +"%Y-%m-%d %H:%M:%S") Host is uncontactable!"
		[[ $x == 10 ]] && [[ -z "$quiet" ]] && echo "Failng after too many attempts to contact host"
		[[ $x == 10 ]] && exit 0
		((x++))
		sleep 10
	done


	echo -e "--------| Starting backup of $target at $(date +%Y-%m-%d\ %H:%M:%S) |--------"
	OS=$(ssh "$target" 'grep "^NAME=" /etc/os-release | grep -Pio "\"[a-z ]+\"" | sed "s/\"//g"')

	if [[ $OS == 'Arch Linux' ]]; then
		echo "$(clock) Supported OS detected..."
		echo "$(clock) Generating package inclusions list..."
		fs=$(ssh "$target" 'find /usr ! -name lost+found \( -type d -printf "%p/\n" -o -print \) | sort')
		db=$(ssh "$target" "pacman -Qql | grep '^/usr' | sort -u")
		package_inclusions=$(comm -23 <(echo "$fs") <(echo "$db") | grep -v '/$')
		default_exclusions=$(cat <<-EOF
			$default_exclusions
			/usr
		EOF
		)
	fi

	echo "$(clock) Starting backup of $target to $backup_current"
	
	backup_previous=$(find "$backup_host_dir" -maxdepth 1 -name '20*' | sort -n | tail -1)
	if [[ -n $backup_previous ]]
	then
		echo "$(clock) Using $backup_previous for hardlinks"
		inc=--link-dest=$backup_previous
	else
		echo "$(clock) No previous backup detected in $backup_host_dir. Creating new full backup set"
		inc=""
	fi

	rsync $rsyncopts --stats --delete --delete-excluded \
		--exclude-from="$custom_exclusions" \
		--exclude-from=<(echo "$default_exclusions") \
		--rsync-path='nice rsync' $inc "$target:/" "$backup_current"
	rc=$?
	rsync_check $rc
	touch "$backup_current"

	if [[ $rc != 0 ]] && [[ $rc != 24 ]]; then
	       rsyncfailed=true
	else
		if [[ $OS == 'Arch Linux' ]]; then
			echo "$(clock) Copying only non-package files for /usr..."
			for file in $package_inclusions
			do
				# TODO: Ignore exlusion lists?
				rsync ${rsyncopts} -Rpltgo --rsync-path='nice rsync' $inc "$target:${file}" "$backup_current"
			done 
		fi
	fi

	echo -n "$(clock) Syncing filesystems... "
	sync; check $?

	echo "$(clock) Clean Up: Starting..."
	for backup in $(find ${backup_host_dir}/20* -maxdepth 0 -type d -mtime +30)
	do
		remove-backup "$backup"
	done
	echo "$(clock) Clean Up: Completed"

	exit_cleanup
	[[ -n $error ]] && exit "$error"
else
	echo "$DATE Lock file $LOCK present. Aborting"
fi
