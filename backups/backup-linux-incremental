#!/bin/bash
#
# backup-linux-incremental - hardlink based rsync incremental backup
#
# Cleanup is enabled by having .cleanup file present in the backup location
#


# Static variables
BACKUPDIR=/raid/shares/backups/Incremental
DATE=$(date +%Y-%m-%d)

# Initial checks
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

# Functions
DIR=`dirname $(readlink -f "$0")`
. $DIR/lib/check


clock () { echo -n "[`date +%H:%M:%S`] "; }
function rsync-check {
	[[ $1 == 0 ]] && echo `clock`"Rsync finished Successfully"
	[[ $1 != 0 ]] && echo `clock`"Rsync failed with error code $1, backup for $DATE will be deleted."
	return $1
}

function remove-backup {
	echo `clock`"Clean Up: $1 backup has been detected as over 30 days old"
	if [[ -z "$cleanup" ]]
	then
		echo `clock`"Clean Up: An error has occurred during cleanup; $1 will NOT be deleted"
	else
		if [ -f $cleanup ]
		then
			echo `clock`"Clean Up: Clean Up is enabled; Deleting $1"
			rm -rf $1
		else
			echo `clock`"Clean Up: Clean Up is disabled; $1 will NOT be deleted."
		fi
	fi
}

if echo $(basename "$0") | grep -qE  "^backup-[a-z][a-z][a-z]+$"
then
	target=$(echo $(basename "$0") | sed 's/backup-//')
	quiet=true
else
	target=$1
fi

if [[ -z "$target" ]]
then
	echo "Please specify a host to back up"
	exit 1
fi

LOG="/var/log/backup-linux-incremental-$target.log"
LOCK="/run/lock/backup-linux-incremental-$target"

if [[ -z "$quiet" ]]
then
	exec > >(tee $LOG)
else
	exec > $LOG
fi

exec 200>$LOCK
if flock -xn 200; then
	trap "rm $LOCK" SIGINT SIGTERM
	
	# Instance variables
	backup_host_dir="$BACKUPDIR/$target"
	backup_current="$backup_host_dir/$DATE"
	exclude=$backup_host_dir/_exclude
	exclude2=/tmp/$(basename "$0")_exclude
	cleanup=$backup_host_dir/_cleanup

	if [ ! -f $exclude ]
	then
		echo "The '_exclude' file is required in the backup directory ($backup_host_dir)"
		exit 1
	fi

	if [ -e $backup_current ]
	then
		[[ -z "$quiet" ]] && echo "$DATE A backup in $backup_current already exists! Please delete this folder first if you wish to create a new backup. Aborting!"
		exit 0
	fi

	x=0
	while ! ssh -oBatchMode=yes  -oConnectTimeout=30 $target echo > /dev/null 2>&1
	do
		[[ -z "$quiet" ]] && echo "$(date +"%Y-%m-%d %H:%M:%S") Host is uncontactable!"
		[[ $x == 10 ]] && [[ -z "$quiet" ]] && echo "Failng after too many attempts to contact host"
		[[ $x == 10 ]] && exit 0
		((x++))
		sleep 10
	done

	cat << EOF > $exclude2
/dev/*
/mnt/*
/media/*
/proc/*
/run/*
/sys/*
/var/cache/pacman/pkg/*
EOF

	echo -e "--------| Starting backup of $target at `date +%Y-%m-%d\ %H:%M:%S` |--------"

	echo `clock`"Starting backup of $backup_host to $backup_current"
	
	backup_previous=$(ls -d1 $backup_host_dir/20* 2>/dev/null| sort -n | tail -1)
	if [ $backup_previous ]
	then
		echo `clock`"Using $backup_previous for hardlinks"
		inc=--link-dest=$backup_previous
	else
		echo `clock`"No previous backup detected in $backup_host_dir. Creating new full backup set"
		inc=""
	fi

	rsync -aAXH --stats --delete --delete-excluded --exclude-from=$exclude \
		--exclude-from=$exclude2 $inc $target:/ "$backup_current"
	rsync-check $?
	[[ $? != 0 ]] && rm -rf "$backup_current" || touch "$backup_current"

	echo -n `clock`"Syncing filesystems... "
	sync; check $?

	if [ -f $cleanup ]
	then
		echo `clock`"Clean Up: Starting..."
		for i in `find $backup_host_dir/20* -maxdepth 0 -type d -mtime +30`
		do
			remove-backup $i
		done
		echo `clock`"Clean Up: Completed"
	else
		echo `clock`"Clean Up: Disabled; skipping..."
	fi
else
	echo "$DATE Lock file $LOCK present. Aborting"
fi
