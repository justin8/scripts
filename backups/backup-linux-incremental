#!/bin/bash
#
# backup-linux-incremental - hardlink based rsync incremental backup
#
# Cleanup is enabled by having .cleanup file present in the backup location
#


# Static variables
BACKUPDIR=/raid/shares/backups/Incremental
DATE=$(date +%Y-%m-%d)

# Initial checks
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

# Functions
DIR=`dirname $(readlink -f "$0")`
. $DIR/../lib/check


clock () { echo -n "[`date +%H:%M:%S`] "; }
function rsync-check {
	[[ $1 == 0 ]] && echo `clock`"Rsync finished Successfully"
	[[ $1 == 24 ]] && echo `clock`"Rsync finished with some ignorable errors (some files vanished before they could be transferred)" && 1=0
	[[ $1 != 0 ]] && echo `clock`"Rsync failed with error code $1, backup for $DATE will be deleted."
	return $1
}

function remove-backup {
	echo `clock`"Clean Up: $1 backup has been detected as over 30 days old"
	if [[ -z "$cleanup" ]]
	then
		echo `clock`"Clean Up: An error has occurred during cleanup; $1 will NOT be deleted"
	else
		if [ -f $cleanup ]
		then
			echo `clock`"Clean Up: Clean Up is enabled; Deleting $1"
			rm -rf $1
		else
			echo `clock`"Clean Up: Clean Up is disabled; $1 will NOT be deleted."
		fi
	fi
}

function exit-cleanup {
	[[ -n $default_exclusions ]] && rm -rf $default_exclusions
	[[ -n $package_inclusions ]] && rm -rf $package_inclusions
	[[ -n $rsyncfailed ]] && rm -rf $backup_current
	rm -f $LOCK
}

if echo $(basename "$0") | grep -qE  "^backup-[a-z][a-z][a-z]+$"
then
	target=$(echo $(basename "$0") | sed 's/backup-//')
	quiet=true
else
	target=$1
fi

if [[ -z "$target" ]]
then
	echo "Please specify a host to back up"
	exit 1
fi

LOG="/var/log/backup-linux-incremental-$target.log"
LOCK="/run/lock/backup-linux-incremental-$target"

if [[ -z "$quiet" ]]
then
	exec > >(tee $LOG) 2>&1
else
	exec > $LOG 2>&1
fi

exec 200>$LOCK
if flock -xn 200; then
	trap exit-cleanup 0 SIGINT SIGTERM
	
	# Instance variables
	backup_host_dir="$BACKUPDIR/$target"
	backup_current="$backup_host_dir/$DATE"
	rsyncopts="-aHAX --rsync-path='nice rsync'"
	rsyncoptsfile=$backup_host_dir/_rsyncopts
	custom_exclusions=$backup_host_dir/_exclude
	default_exclusions=$(mktemp)
	package_inclusions=$(mktemp)
	cleanup=$backup_host_dir/_cleanup

	if [ ! -f $exclude ]
	then
		echo "The '_exclude' file is required in the backup directory ($backup_host_dir)"
		exit 1
	fi

	if [ -f $rsyncoptsfile ]
	then
		rsyncopts=$(head -n1 $rsyncoptsfile)
	fi

	if [ -e $backup_current ]
	then
		[[ -z "$quiet" ]] && echo "$DATE A backup in $backup_current already exists! Please delete this folder first if you wish to create a new backup. Aborting!"
		exit 0
	fi

	x=0
	while ! ssh -oBatchMode=yes  -oConnectTimeout=30 $target echo > /dev/null 2>&1
	do
		[[ -z "$quiet" ]] && echo "$(date +"%Y-%m-%d %H:%M:%S") Host is uncontactable!"
		[[ $x == 10 ]] && [[ -z "$quiet" ]] && echo "Failng after too many attempts to contact host"
		[[ $x == 10 ]] && exit 0
		((x++))
		sleep 10
	done

	cat << EOF > $default_exclusions
/dev/*
/mnt/*
/media/*
/proc/*
/run/*
/sys/*
/tmp/*
/var/abs/*
/var/cache/pacman/pkg/*
/var/lib/mlocate/mlocate.db
/var/tmp/*
lost+found
EOF

	echo -e "--------| Starting backup of $target at `date +%Y-%m-%d\ %H:%M:%S` |--------"
	OS=$(ssh $target 'grep "^NAME=" /etc/os-release | grep -Pio "\"[a-z ]+\"" | sed "s/\"//g"')

	if [[ $OS == 'Arch Linux' ]]; then
		echo `clock`"Supported OS detected..."
		echo `clock`"Generating package inclusions list..."
		tmpdb=$(mktemp)
		tmpfs=$(mktemp)
		ssh $target 'pacman -Qql | sort -u' > "$tmpdb"
		ssh $target 'find /opt /usr ! -name lost+found \( -type d -printf "%p/\n" -o -print \) | sort' > "$tmpfs"
		comm -23 "$tmpfs" "$tmpdb" > $package_inclusions
		rm -rf $tmpdb $tmpfs

		cat <<-EOF >> $default_exclusions
			/usr
			/opt
		EOF
	fi

	echo `clock`"Starting backup of $target to $backup_current"
	
	backup_previous=$(ls -d1 $backup_host_dir/20* 2>/dev/null| sort -n | tail -1)
	if [[ -n $backup_previous ]]
	then
		echo `clock`"Using $backup_previous for hardlinks"
		inc=--link-dest=$backup_previous
	else
		echo `clock`"No previous backup detected in $backup_host_dir. Creating new full backup set"
		inc=""
	fi

	rsync $rsyncopts --stats --delete --delete-excluded \
		--exclude-from=$custom_exclusions \
		--exclude-from=$default_exclusions \
		$inc $target:/ "$backup_current"
	rc=$?
	rsync-check $rc

	if [[ $rc != 0 ]] && [[ $rc == 24 ]]; then
	       rsyncfailed=true
	else
	       touch "$backup_current"
		if [[ $OS == 'Arch Linux' ]]; then
			echo -n `clock`"Copying only non-package files for /usr & /opt"
			while read file
			do
				rsync ${rsyncopts}R $inc $target:${file} "$backup_current"
			done < $package_inclusions

			echo -n `clock`"Generating package list..."
			ssh $target 'pacman -Qqe' > "$backup_current/package-list"
			check $?
		fi
	fi

	echo -n `clock`"Syncing filesystems... "
	sync; check $?

	if [ -f $cleanup ]
	then
		echo `clock`"Clean Up: Starting..."
		for i in `find $backup_host_dir/20* -maxdepth 0 -type d -mtime +30`
		do
			remove-backup $i
		done
		echo `clock`"Clean Up: Completed"
	else
		echo `clock`"Clean Up: Disabled; skipping..."
	fi
else
	echo "$DATE Lock file $LOCK present. Aborting"
fi
