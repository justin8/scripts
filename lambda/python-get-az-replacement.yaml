
---
AWSTemplateFormatVersion: '2010-09-09'
Description: cloudformation template for creating a custom resource using a lamda
  function in python
Resources:
  GetAZFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile:
          Fn::Join:
          - "\n"
          - - "import boto3"
            - "import botocore"
            - "import json"
            - "import logging"
            - "import cfnresponse"
            - "client = boto3.client('cloudformation')"
            - "s3 = boto3.resource('s3')"
            - "logging.basicConfig(level=logging.INFO)"
            - "log = logging.getLogger()"
            - 'def lambda_handler(event, context):'
            - "  AZs = event['ResourceProperties']['AZs']"
            - "  bucketName = event['ResourceProperties']['BucketName']"
            - "  region = event['ResourceProperties']['Region']"
            - "  log.info('Received event: ' + str(event))"
            - "  log.info('AZs: ' + str(AZs))"
            - "  log.info('bucketName: ' + bucketName)"
            - "  log.info('region: ' + region)"
            - ""
            - "  file = s3.Object(bucketName, 'regions.json')"
            - "  try:"
            - "    file.load()"
            - "  except botocore.exceptions.ClientError as e:"
            - "    if e.response['Error']['Code']:"
            - "      file.put(Body=json.dumps(AZs))"
            - "    else:"
            - "      raise(e)"
            - ""
            - "  available_zones = json.loads(file.get()['Body'].read())"
            - "  responseData = {}"
            - "  responseData['0'] = available_zones[0]"
            - "  responseData['1'] = available_zones[1]"
            - "  try:"
            - "    responseData['2'] = available_zones[2]"
            - "  except:"
            - "    pass"
            - "  log.info('Responding with: ' + str(responseData))"
            - '  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")'
      Runtime: python2.7
      Timeout: '10'
  AvailableZones:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - GetAZFunction
        - Arn
      BucketName: !Ref RegionBucket
      Region: !Ref AWS::Region
      AZs:
          Fn::GetAZs:
            Ref: AWS::Region
  RegionBucket:
    Type: AWS::S3::Bucket
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - "s3:*"
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: RegionBucket
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: RegionBucket
                - '/*'
Outputs:
  FirstAZ:
    Value:
      Fn::GetAtt:
        - AvailableZones
        - '0'
  SecondAZ:
    Value:
      Fn::GetAtt:
        - AvailableZones
        - '1'
