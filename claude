#!/usr/bin/env python

import json
import sys
from enum import Enum
from typing import Dict, List

import boto3
import click
from rich.console import Console
from rich.markdown import Markdown

bedrock = boto3.client("bedrock-runtime")
console = Console()


class ConversationRole(Enum):
    USER = "user"
    ASSISTANT = "assistant"

    def __str__(self):
        return self.value


def add_message(
    messages: List[Dict[str, str]], role: ConversationRole, user_message: str
):
    messages.append({"role": str(role), "content": user_message})
    return messages


def claude(messages: List[Dict[str, str]]):
    modelId = "anthropic.claude-3-sonnet-20240229-v1:0"
    body = json.dumps(
        {
            "messages": messages,
            "max_tokens": 2000,
            "temperature": 1,
            "top_k": 250,
            "top_p": 0.999,
            "stop_sequences": ["\n\nHuman:"],
            "anthropic_version": "bedrock-2023-05-31",
        }
    )

    with console.status("[bold green]Waiting for response..."):
        response = bedrock.invoke_model(modelId=modelId, body=body)
        body = json.loads(response["body"].read())
        response_message = body["content"][0]

        if response_message["type"] != "text":
            raise RuntimeError(
                "Unexpected response type to prompt: " + response_message["type"]
            )

        output = response_message["text"]

    return output


def formatted_print(text):
    console.print(Markdown(text))


@click.command()
@click.argument("args", nargs=-1)
def main(args):
    message_history = []

    print(
        "Hello! I am an AI assistant powered by Claude and Amazon Bedrock. Enter 'quit' or 'exit' at any time to exit. How may I help you today?"
    )
    print("(You can clear existing context by starting a query with 'new>')")

    while True:
        print()
        if message_history == [] and args:
            user_input = " ".join(args)
            print(f"> {user_input}")
        else:
            user_input = input("> ")

        print()
        if user_input.lower() == "quit" or user_input.lower() == "exit":
            print("Goodbye!")
            sys.exit()
        if user_input.lower().startswith("new>"):
            message_history = []

        message_history = add_message(
            message_history, ConversationRole.USER, user_input
        )

        response = claude(message_history)
        formatted_print(response)
        message_history = add_message(
            message_history, ConversationRole.ASSISTANT, response
        )

        print()


if __name__ == "__main__":
    main()
