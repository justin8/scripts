#!/bin/bash
#
# diskbackup - hardlink based rsync incremental backup
#

# Static variables
HOST="abachi"
BACKUPDIR=/raid/shares/backups/Linux
DATE=`date +%Y-%m-%d`
LOG="/var/log/system-backup-incremental.log"

if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

if [ $# == 1 ] ; then
	echo "${DATE}You must specify a single machine to make an incremental backup of."
	exit 1
fi

LOCK=/run/lock/`basename $0`
exec 200>${LOCK}
if flock -xn 200; then

	# Instance variables
	backup_host_dir="${BACKUPDIR}/${HOST}"
	backup_current="${backup_host_dir}/${DATE}"
	exclude=${backup_current}/_exclude

	clock () { echo -n "[`date +%H:%M:%S`] "; }
	function check {
		[[ $1 == 0 ]] && echo -e "[\e[1;32mOK\e[00m]"
		[[ $1 != 0 ]] && echo -e "[\e[1;31mFAILED\e[00m]\nSee ${LOG} for more details"
	}

	function rsync-check {
	[[ $1 == 0 ]] && echo `clock`"Rsync failed with error code $1, backup for ${DATE} may be corrupt."
	[[ $1 != 0 ]] && echo `clock`"Rsync finished Successfully"
	}


	echo -e "-----------------------| Starting backup of ${backup_host} at `date +%Y-%m-%d\ %H:%M:%S` |-----------------------" > ${LOG}
	exec > >(tee ${LOG})


	echo `clock`"Starting backup of ${backup_host} to ${backup_current}"
	
	echo -n `clock`"Mounting root for backup... "
	mkdir -p /tmp/${HOST}
	umount /tmp/${HOST}
	mount -o bind / /tmp/${HOST}
	check $?

	backup_previous=`ls -d1 ${backup_host_dir}/* | sort -n | tail -1`
	if [ ${backup_previous} ]
	then
		echo `clock`"Using ${backup_previous} for hardlinks"
		rsync -a --stats --delete --delete-excluded --exclude-from=${exclude} --link-dest=${backup_previous} /tmp/${HOST} ${backup_current}
		rync-check $?
	else
		echo `clock`"No previous backup detected in ${backup_host_dir}. Creating new full backup set"
		rsync -a --stats --delete --delete-excluded --exclude-from=$exclude /tmp/${HOST} ${backup_current}
		rsync-check $?
	fi

	echo `clock`"Syncing filesystems..."
	sync
	echo -e `clock`"Removing bind mount..."
	umount /tmp/${HOST}
	check $?

	# Clean up directories
#	for i in `find $backup_volume/$backup_name.* -maxdepth 0 -type d`
#	do
#		date_folder=`echo $i | cut -d "." -f 2 | cut -d "_" -f 1`
#		if [ $date_folder -ne `date +%Y%m%d` -a $date_folder -ne `date -v-1d +%Y%m%d` ]; then
#			num_folders=(`find $backup_volume/$backup_name.$date_folder* -maxdepth 0 -type d | wc -l` / 1)
#			if [ $num_folders -gt 1 ]; then
#				echo `clock`"Clean up: Date $date_folder has $num_folders backups, deleting $i"
#				rm -rf $i
#				echo `clock`"Clean up: Backup $i removed"
#			fi
#		fi
#	done

else
	echo "${DATE} Lock file ${LOCK} present. Aborting"
fi
