#!/usr/bin/env python

import os
import shutil
from datetime import datetime
from pathlib import Path

import click
from dateutil import parser
from rich.progress import track

raw_file_extensions = [
    ".3fr",  # Hasselblad
    ".ari",  # ARRI
    ".arw",  # Sony
    ".bay",  # Casio
    ".cap",  # Canon
    ".cr2",  # Canon
    ".cr3",  # Canon
    ".crw",  # Canon
    ".data",  # Olympus
    ".dcs",  # Kodak
    ".dng",  # Digital Negative (Adobe)
    ".erf",  # Epson
    ".fff",  # Hasselblad
    ".gpr",  # GoPro
    ".iiq",  # Phase One
    ".k25",  # Kodak
    ".kdc",  # Kodak
    ".mef",  # Mamiya
    ".mos",  # Leaf
    ".mrw",  # Minolta
    ".nef",  # Nikon
    ".nrw",  # Nikon
    ".obm",  # Olympus
    ".orf",  # Olympus
    ".pef",  # Pentax
    ".raf",  # Fujifilm
    ".raw",  # Panasonic, Leica
    ".rw2",  # Panasonic
    ".rwl",  # Leica
    ".sr2",  # Sony
    ".srf",  # Sony
    ".x3f",  # Sigma
]


def is_raw_file(filename):
    for ext in raw_file_extensions:
        if filename.lower().endswith(ext):
            return True
    return False


def get_file_list(path):
    file_list = []
    for root, _, files in os.walk(path):
        for file in files:
            if is_raw_file(file):
                file_path = os.path.join(root, file)
                file_list.append(file_path)
    file_list.sort()
    return file_list


def get_destination_path(source_file):
    file_name = os.path.basename(source_file)
    home_dir = Path.home()
    pictures_dir = home_dir / "Pictures"

    mod_time = os.path.getmtime(source_file)
    mod_datetime = datetime.fromtimestamp(mod_time)

    year_dir = pictures_dir / str(mod_datetime.year)
    month_dir = year_dir / str(mod_datetime.month).zfill(2)
    day_dir = month_dir / str(mod_datetime.day).zfill(2)

    return day_dir / file_name


@click.command()
@click.argument("source_path", type=click.Path(exists=True))
@click.option("--dry-run", is_flag=True, help="Dry run mode (don't copy files)")
@click.option("-v", "--verbose", is_flag=True, help="Verbose mode")
@click.option("-a", "--after", help="Only process files after the given date")
def main(source_path, dry_run, verbose, after):
    after_date = parser.parse(after) if after else None
    file_list = get_file_list(source_path)

    for source_file in track(file_list, description="Processing..."):
        destination = get_destination_path(source_file)
        if not dry_run:
            os.makedirs(os.path.dirname(destination), exist_ok=True)

        if after_date:
            mod_time = os.path.getmtime(source_file)
            mod_datetime = datetime.fromtimestamp(mod_time)
            if mod_datetime < after_date:
                if verbose:
                    print(f"{source_file} modified before {after_date}, skipping copy")
                continue

        if destination.exists():
            src_stat = os.stat(source_file)
            dest_stat = os.stat(destination)
            if (
                src_stat.st_size == dest_stat.st_size
                and src_stat.st_mtime == dest_stat.st_mtime
            ):
                if verbose:
                    print(
                        f"{destination} already exists with same size and modification time, skipping copy"
                    )
                continue

        if verbose:
            if dry_run:
                print(f"[dry-run] Would copy {source_file} to {destination}")
            else:
                print(f"Copying {source_file} to {destination}")

        if dry_run:
            continue
        shutil.copy2(source_file, destination)


if __name__ == "__main__":
    main()
