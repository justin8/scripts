#!/bin/bash
LOCK="/run/lock/$(basename "$(readlink -f "$0")")"
PACKAGES="zsh"
GUI_PACKAGES="lxdm i3"

set -e

usage() {
	cat <<-EOF
	usage: $(basename "$(readlink -f "$0")")

	This script will install Arch linux to the specified device/mountpoint.
	Either a device or a mountpoint must be specified; not both.

	OPTIONS:
	-h	    Show this help
	-g	    Install GUI packages as well.
	-d <dev>    Device
	-m <mnt>    Mount point
	EOF
}

device_cleanup() {
	umount -l "$mountpoint/boot"
	umount -l "$mountpoint"
	rmdir "$mountpoint"
}

if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

while getopts ":d:ghm:v" OPTION
do
	case $OPTION in
		g) gui=true ;;
		h) usage; exit 0 ;;
		d) device="$OPTARG" ;;
		m) mountpoint="$OPTARG" ;;
	esac
done
shift $((OPTIND - 1))

if ( [[ -n $device ]] && [[ -n $mountpoint ]] ) || ( [[ -z $device ]] && [[ -z $mountpoint ]] )
then
	echo -e "\e[31;1mYou must specify either a device or a mount point but not both.\e[0m"
	usage
	exit 1
fi

echo "Please enter a hostname. It must be specified as an FQDN with a shortname of up to 11 characters"
read fqdn
shortname="${fqdn%%.*}"

if [[ $(echo -n "$shortname" | wc -c) -gt 11 ]]
then
	echo "The specified hostname is too long! it must be under 11 characters long Aborting"
	exit 1
fi

exec 200>"$LOCK"

if flock -xn 200
then
	if [[ -n $device ]]
	then
		if [[ ! -b $device ]]
		then
			echo -e "\e[31;1mThe specified device $device is not a block device!\e[0m"
		else
			echo "This will overwrite all data on device $device!"
		fi
		echo -e "\e[31;1mPress enter if you're sure you want to continue anyway, or ctrl+c to exit.\e[0m"
		read

		trap "device_cleanup" quit

		bootdev="${device}1"
		mountpoint=$(mktemp -d)

		# Make a 200M sdX1 and the rest of the disk as sdX2
		echo -e "o\nn\n\n\n\n+200M\nn\n\n\n\n\nw\n" | fdisk "$device"
		mkfs.ext4 -m 0 -L "${shortname}-boot" "${device}1"
		mkfs.btrfs -L "${shortname}-btrfs" "${device}2"

		# Set up root as a btrfs subvolume
		mount "${device}2" "$mountpoint"
		btrfs subvolume create "${mountpoint}/root"
		btrfs_root_id=$(btrfs subvolume list "$mountpoint" | grep 'path root' | cut -d' ' -f 2)
		btrfs subvolume set-default "$btrfs_root_id" "$mountpoint"
		umount -l "$mountpoint"

		# Mount all of the things
		mount -o relatime "${device}2" "$mountpoint"
		mkdir "$mountpoint/boot"
		mount -o relatime "${device}1" "$mountpoint/boot"
	elif [[ -n $mountpoint ]]
	then
		if ! (mount | grep -q "\s${mountpoint}\s\s*type")
		then
			echo "The specified mount point $mountpoint does not appear to be mounted. Aborting."
			exit 1
		fi
		bootdev=$(mount | grep "\s${mountpoint}/boot\s\s*type" | cut -d' ' -f1)
		[[ -z $bootdev ]] && bootdev=$(mount | grep "\s${mountpoint}\s\s*type" | cut -d' ' -f1)
	fi

	if ! [[ -b $bootdev ]]
	then
		echo "Unable to find where /boot should exist. Aborting."
		exit 1
	fi

	#Stuff is mounted and good to go here at mountpoint

	#install os
	pacstrap -c "$mountpoint" base syslinux puppet

	#install additional packages
	pacstrap -c "$mountpoint" "$PACKAGES"

	if [[ -n $gui ]]
	then
		gfx_options=('nVidia', 'Nouveau', 'AMD', 'Intel', 'None')
		echo "Choose a graphics driver to install:"
		select opt in "${options[@]}"
		do
			case "$opt" in
				nVidia|Nouveau|AMD|Intel) gpu="$opt"; break ;;
				None)    echo "Skipping graphics card driver installation"; break ;;
				*)       echo "Please make a valid selection!" ;;
			esac
		done
		case "$gpu" in
			nVidia)	 gfx_packages="nvidia";;
			Nouveau)
				gfx_packages="xf86-video-nouveau"
				sed -i '/MODULES=/s/"$/ nouveau"/' "${mountpoint}/etc/mkinitcpio.conf"
				;;
			AMD)     gfx_packages="xf86-video-ati";;
			Intel)   gfx_packages="xf86-video-intel";;
		esac
		[[ -n $gfx_packages ]] && pacstrap -c "$mountpoint" "$gfx_packages"

		pacstrap -c "$mountpoint" "$GUI_PACKAGES"
	fi

	# Generate fstab
	mkdir -p "${mountpoint}/mnt/btrfs"
	genfstab -L "$mountpoint" > "${mountpoint}/etc/fstab"
	echo "LABEL=${shortname}-btrfs /mnt/btrfs btrfs defaults,volid=0 0 0" >> "${mountpoint}/etc/fstab"

	# host-specific config
	echo "$shortname" > "${mountpoint}/etc/hostname"
	echo "127.0.1.1	    $fqdn	$shortname" >> "${mountpoint}/etc/hosts"

	# Boot loader config
	sed -i "s|APPEND root=/dev/sda3|APPEND root=LABEL=${rootlabel}|g" "${mountpoint}/boot/syslinux/syslinux.cfg"
	arch-chroot "${mountpoint}" "syslinux-install_update -iam"
	arch-chroot "${mountpoint}" "mkinitcpio -p linux"

	# TODO: Needs testing. Maybe just enable the service if default is to apply? but it would be better
	# to captue errors during the initial install.
	# Will the hostname need to be set first?
	arch-chroot "${mountpoint}" "puppet agent -t --no-noop"

	# TODO: dotfiles install for root
	# TODO: Maybe dotfiles/useraccount for justin?

	# Warning only for when run against a mount point and not letting the script do the partitioning
	[[ -n $device ]] && echo -e "\e[31;1mMake sure to edit /boot/syslinux manually to have the correct root device name\e[0m"
else
	echo "Another instance of this script is already running! Aborting."
fi

