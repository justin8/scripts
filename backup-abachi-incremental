#!/bin/bash
#
# diskbackup - hardlink based rsync incremental backup
#
# Cleanup is enabled by have .cleanup file present in the backup location
#

# Static variables
HOST="abachi"
BACKUPDIR=/raid/shares/backups/Linux
DATE=`date +%Y-%m-%d`
LOG="/var/log/backup-${HOST}-incremental.log"

# Initial checks
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

# Functions
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "${DIR}" ]]; then DIR="${PWD}"; fi
. ${DIR}/lib/check

clock () { echo -n "[`date +%H:%M:%S`] "; }
function rsync-check {
	[[ $1 == 0 ]] && echo `clock`"Rsync finished Successfully"
	[[ $1 != 0 ]] && echo `clock`"Rsync failed with error code $1, backup for ${DATE} may be corrupt."
}

function remove-backup {
	echo `clock`"Clean Up: ${1} backup has been detected as over 30 days old"
	if [ "x${cleanup}" = "x" ]
	then
		echo `clock`"Clean Up: An error has occurred during cleanup; ${1} will NOT be deleted"
	else
		if [ -f ${cleanup} ]
		then
			echo `clock`"Clean Up: Clean Up is enabled; Deleting ${1}"
			#rm -rf ${1} # Commented out until further testing
			echo "Should be deleting ${1} here when script is finished testing"
		else
			echo `clock`"Clean Up: Clean Up is disabled; ${1} will NOT be deleted."
		fi
	fi
}


exec > >(tee ${LOG})
LOCK=/run/lock/`basename $0`
exec 200>${LOCK}
if flock -xn 200; then
	echo "" > ${LOG}

	# Instance variables
	backup_host_dir="${BACKUPDIR}/${HOST}"
	backup_current="${backup_host_dir}/${DATE}"
	backup_source="/tmp/${HOST}"
	exclude=${backup_host_dir}/_exclude
	cleanup=${backup_host_dir}/_cleanup

	if [ ! -f ${exclude} ]
	then
		echo "The '_exclude' file is required in the backup directory (${backup_host_dir})"
		exit 1
	fi

	if [ -e ${backup_current} ]
	then
		echo "${DATE} A backup in ${backup_current} already exists! Please delete this folder first if you wish to create a new backup. Aborting!"
		exit 1
	fi

	echo -e "-----------------------| Starting backup of ${HOST} at `date +%Y-%m-%d\ %H:%M:%S` |-----------------------"

	echo `clock`"Starting backup of ${backup_host} to ${backup_current}"
	
	echo -n `clock`"Mounting root to ${backup_source} for backup... "
	mkdir -p ${backup_source}
	umount ${backup_source} > /dev/null 2>&1
	mount -o bind / ${backup_source}
	check $?

	backup_previous=`ls -d1 ${backup_host_dir}/20* | sort -n | tail -1`
	if [ ${backup_previous} ]
	then
		echo `clock`"Using ${backup_previous} for hardlinks"
		rsync -aH --stats --delete --delete-excluded --exclude-from=${exclude} \
			--link-dest=${backup_previous} ${backup_source}/ ${backup_current}
		rsync-check $?
	else
		echo `clock`"No previous backup detected in ${backup_host_dir}. Creating new full backup set"
		rsync -aH --stats --delete --delete-excluded --exclude-from=$exclude \
			${backup_source}/ ${backup_current}
		rsync-check $?
	fi

	echo -n `clock`"Syncing filesystems... "
	sync; check $?
	echo -n `clock`"Removing bind mount... "
	umount ${backup_source}; check $?
	rmdir ${backup_source}

	echo `clock`"Clean Up: Starting..."
	for i in `find $backup_host_dir/20* -maxdepth 0 -type d -mtime 30`
	do
		remove-backup ${i}
	done
	echo `clock`"Clean Up: Completed"

else
	echo "${DATE} Lock file ${LOCK} present. Aborting"
fi
